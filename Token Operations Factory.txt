// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
import "./TokenOperations.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */

contract TokenOperationsFactory{
    TokenOperations[] private tokenOperations;
    event TokenCreated(TokenOperations tokenCreated);

    function createToken(
        string memory name,
        string memory symbol,
        uint256 decimal,
        uint256 initialTokenSupply
    ) external {
        TokenOperations _tokenOperations = new TokenOperations(
            name,
            symbol,
            decimal,
            initialTokenSupply,
            tx.origin
        );
        tokenOperations.push(_tokenOperations);
        emit TokenCreated(_tokenOperations);
       // emit TokenCreated(tokenCreated);
    }
     function getMetaCoins() external view returns (TokenOperations[] memory) {
        return tokenOperations;
    }
   
}